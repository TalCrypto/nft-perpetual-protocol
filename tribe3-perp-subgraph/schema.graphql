type Position @entity {
  id: ID!
  trader: Bytes! # address
  margin: BigInt! # uint256
  openNotional: BigInt! # total position notional values at open
  tradingVolume: BigInt! # trading volume in notional value
  leverage: BigInt! # openNotional / margin
  realizedPnl: BigInt! # int256
  unrealizedPnl: BigInt! # int256
  fundingPayment: BigInt! # int256
  fee: BigInt! # uint256
  badDebt: BigInt! # uint256
  liquidationPenalty: BigInt! # uint256
  totalPnlAmount: BigInt! # accumulated total PnL (realizedPnl - fundingPayment - fee - liquidationPenalty)
  ammPositions: [AmmPosition!]! @derivedFrom(field: "position") # breakdown for each Amm
  blockNumber: BigInt # last updated block number
  timestamp: BigInt # last updated timestamp
}

type AmmPosition @entity {
  id: ID!
  amm: Bytes! # address
  trader: Bytes! # address
  margin: BigInt! # uint256
  positionSize: BigInt! # int256
  openNotional: BigInt! # position notional value at open
  tradingVolume: BigInt! # trading volume in notional value
  leverage: BigInt! # openNotional / margin
  entryPrice: BigInt! # openNotional / positionSize
  realizedPnl: BigInt! # int256
  unrealizedPnl: BigInt! # int256
  fundingPayment: BigInt! # int256
  fee: BigInt! # uint256
  badDebt: BigInt! # uint256
  liquidationPenalty: BigInt! # uint256
  totalPnlAmount: BigInt! # accumulated total PnL (realizedPnl - fundingPayment - fee - liquidationPenalty)
  position: Position!
  blockNumber: BigInt # last updated block number
  timestamp: BigInt # last updated timestamp
}

type Amm @entity {
  id: ID!
  address: Bytes! # address
  positionBalance: BigInt! # int256
  openInterestSize: BigInt! # uint256
  openInterestNotional: BigInt! # uint256
  tradingVolume: BigInt! # trading volume in notional value
  quoteAssetReserve: BigInt! # uint256
  baseAssetReserve: BigInt! # uint256
  blockNumber: BigInt # last updated block number
  timestamp: BigInt # last updated timestamp
}

type PositionChangedEvent @entity {
  id: ID!
  trader: Bytes! # address
  amm: Bytes! # address
  margin: BigInt! # uint256
  positionNotional: BigInt! # uint256
  exchangedPositionSize: BigInt! # uint256
  fee: BigInt! # uint256
  positionSizeAfter: BigInt! # int256
  realizedPnl: BigInt! # int256
  unrealizedPnlAfter: BigInt! # int256
  badDebt: BigInt! # uint256
  liquidationPenalty: BigInt! # uint256
  spotPrice: BigInt! # uint256
  fundingPayment: BigInt! # int256
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}

type PositionLiquidatedEvent @entity {
  id: ID!
  trader: Bytes! # address
  amm: Bytes! # address
  positionNotional: BigInt! # uint256
  positionSize: BigInt! # uint256
  liquidationFee: BigInt! # uint256
  liquidator: Bytes! # address
  badDebt: BigInt! # uint256
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}

type FundingRateUpdatedEvent @entity {
  id: ID!
  amm: Bytes! # address
  rate: BigInt! # int256
  underlyingPrice: BigInt! # int256
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}

type MarginChangedEvent @entity {
  id: ID!
  sender: Bytes! # address
  amm: Bytes! # address
  amount: BigInt! #int256
  fundingPayment: BigInt! # int256
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}

type Trader @entity {
  id: ID!
  position: Position!
  dayData: [TraderDayData!] @derivedFrom(field: "trader")
}

type TraderDayData @entity {
  id: ID!
  trader: Trader!
  date: BigInt!
  tradingVolume: BigInt! # trading volume aggregated per day for trader
  fee: BigInt! # trading fee aggregated per day for trader
  fundingPayment: BigInt! # funding payment aggregated per day for trader
  realizedPnl: BigInt! # total pnl aggregated per day for trader
}

#type ReferralCodeDayData @entity {
#  id: ID!
#  referralCode: ReferralCode!
#  date: BigInt!
#  tradingVolume: BigInt! # trading volume in notional value
#  fees: BigInt! # fees paid during day
#  newReferees: [Trader!]! # a list of new referees added today
#  activeReferees: [Trader!]! # a list of referees which have traded on the day
#}

#type ReferralCode @entity {
#  id: ID!
#  referrer: Trader! # referrer address
#  referees: [Trader!]! @derivedFrom(field: "refereeCode")
#  createdAt: BigInt! # created at
#  dayData: [ReferralCodeDayData!] @derivedFrom(field: "referralCode")
#}

type DayTradeData @entity {
  id: ID!
  amm: Bytes! # address
  timestamp: BigInt!
  open: BigInt!
  high: BigInt!
  low: BigInt!
  close: BigInt!
  volume: BigInt!
  txCount: BigInt!
}

type RepegEvent @entity {
  id: ID!
  amm: Bytes! # address
  quoteAssetReserve: BigInt!
  baseAssetReserve: BigInt!
  cost: BigInt!
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}

type UpdateKEvent @entity {
  id: ID!
  amm: Bytes! # address
  quoteAssetReserve: BigInt!
  baseAssetReserve: BigInt!
  cost: BigInt!
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}

type ReserveSnapshottedEvent @entity {
  id: ID!
  amm: Bytes! # address
  quoteAssetReserve: BigInt!
  baseAssetReserve: BigInt!
  blockNumber: BigInt! # last updated block number
  timestamp: BigInt! # last updated timestamp
}
